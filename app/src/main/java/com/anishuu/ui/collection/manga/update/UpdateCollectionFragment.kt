/**
 * Screen for updating a manga in the collection.
 */
package com.anishuu.ui.collection.manga.update

import android.app.Activity
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import android.widget.Toast
import androidx.core.widget.doAfterTextChanged
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.LiveData
import androidx.lifecycle.Observer
import androidx.lifecycle.Transformations
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.GridLayoutManager
import com.anishuu.AnishuuApplication
import com.anishuu.ui.collection.manga.MangaViewModel
import com.anishuu.ui.collection.manga.MangaViewModelFactory
import com.anishuu.db.manga.MangaSeries
import com.anishuu.db.manga.MangaVolume
import com.anishuu.R
import com.anishuu.SearchMangaQuery
import com.anishuu.databinding.UpdateCollectionFragmentBinding
import com.anishuu.db.manga.Manga
import com.anishuu.ui.collection.manga.SharedMangaDetailsViewModel
import timber.log.Timber

class UpdateCollectionFragment : Fragment() {
    private lateinit var binding: UpdateCollectionFragmentBinding
    private lateinit var adapter: MangaOwnedVolumeAdapter
    private val model: SharedMangaDetailsViewModel by activityViewModels()
    private var seriesExistsInDatabase: Boolean = false
    private lateinit var seriesLiveData: LiveData<Manga>
    private lateinit var selectedMedia: SearchMangaQuery.Medium

    var seriesTitleFromDatabase: String? = ""

    // The manga being edited, if a manga is being edited and not added.
    var selected: Manga? = null

    // The list of volumes for the series.
    var volumeList = mutableListOf<MangaVolume>()
    var selectedSeriesVolumeList = listOf<MangaVolume>()

    override fun onCreateView(inflater: LayoutInflater,
                              container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {
        binding = DataBindingUtil.inflate(inflater,
            R.layout.update_collection_fragment,
            container,
            false)

        adapter = MangaOwnedVolumeAdapter()
        binding.volumeRecyclerview.adapter = adapter
        binding.volumeRecyclerview.layoutManager = GridLayoutManager(context, 2)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // The view model for database operations.
        val application = requireNotNull(this.activity).application
        val mangaViewModelFactory = MangaViewModelFactory(application as AnishuuApplication)
        val mangaViewModel = ViewModelProvider(requireActivity(), mangaViewModelFactory)
            .get(MangaViewModel::class.java)

        /*// Get the selected series from the database.
        seriesLiveData = Transformations.switchMap(model.selected) {
            selectedMedia = it
            seriesTitleFromDatabase = it?.title?.romaji
            it?.title?.romaji?.let { title -> mangaViewModel.getSeries(title) }
        }

        seriesLiveData.observe(viewLifecycleOwner, Observer { manga ->
            Timber.i("In seriesLiveData observe")

            if (manga != null) {
                selected = manga
                seriesExistsInDatabase = true
                selectedSeriesVolumeList = manga.volumes

                binding.titleEntry.setText(manga.series.title)
                binding.numVolumesEntry.setText(if (manga.series.numVolumes > 0) manga.series.numVolumes.toString() else "")
                binding.authorEntry.setText(manga.series.author)
                binding.languageEntry.setText(manga.series.language)
                binding.publisherEntry.setText(manga.series.publisher)
                binding.notesEntry.setText(manga.series.notes)
            } else {
                seriesExistsInDatabase = false
                binding.titleEntry.setText(seriesTitleFromDatabase)
                binding.numVolumesEntry.setText(selectedMedia.volumes?.toString())
            }
        })

        binding.numVolumesEntry.doAfterTextChanged {
            volumeList.clear()

            // Invalidate the previous data in the adapter. SubmitList is hard to use here because we haven't inserted the volume into the DB yet, so
            // we don't have access to an autogenerated volume ID to compare with. This means we're using the volume number to compare, but when we submit
            // a list that has volume numbers that overlap with the current data, that element in the adapter isn't updated and we lose the reference to it,
            // so the owned flag can't be updated.
            adapter.notifyDataSetChanged()

            if (it.toString().isNotEmpty()) {
                val numVolumesEntered: Int = binding.numVolumesEntry.text.toString().toInt()
                val selectedSeriesVolumeCount = selectedSeriesVolumeList.size

                if (seriesExistsInDatabase) {
                    // If the number of volumes entered is less than the number of volumes already stored, get a sublist.
                    if (numVolumesEntered < selectedSeriesVolumeCount) {
                        volumeList = selectedSeriesVolumeList.subList(0, numVolumesEntered).toMutableList()

                    // If the number of volumes entered is greater than the number of volumes already stored, add the difference.
                    } else if (numVolumesEntered > selectedSeriesVolumeCount) {
                        volumeList = selectedSeriesVolumeList.toMutableList()

                        for (i in (selectedSeriesVolumeCount + 1)..numVolumesEntered) {
                            volumeList.add(MangaVolume(i, "", false))
                        }

                    // Otherwise, just copy the selected series' volumes
                    } else {
                        volumeList = selectedSeriesVolumeList.toMutableList()
                    }
                } else {
                    for (i in 1..binding.numVolumesEntry.text.toString().toInt()) {
                        volumeList.add(MangaVolume(i, "", false))
                    }
                }

                volumeList.let { list -> adapter.submitList(list) }
                binding.volumeRecyclerview.visibility = View.VISIBLE
            } else {
                binding.volumeRecyclerview.visibility = View.GONE
            }
        }

        // Select all volumes if the user presses select all.
        binding.selectAll.setOnClickListener {
            volumeList.forEach {
                it.owned = true
            }
            adapter.notifyDataSetChanged()
            volumeList.let { list -> adapter.submitList(list) }
        }

        // De-select all of the volumes if the user presses select none.
        binding.selectNone.setOnClickListener {
            volumeList.forEach {
                it.owned = false
            }
            adapter.notifyDataSetChanged()
            volumeList.let { list -> adapter.submitList(list) }
        }

        // Save the Manga to the database when the save button is pressed.
        binding.buttonSave.setOnClickListener {
            val title = binding.titleEntry.text.toString()

            // Don't let the user proceed without entering a title
            if (title.isNotEmpty()) {
                val numVolumesText = binding.numVolumesEntry.text.toString()
                val numVolumes = if (numVolumesText.isNotEmpty()) numVolumesText.toInt() else 0
                val language = binding.languageEntry.text.toString()
                val author = binding.authorEntry.text.toString()
                val publisher = binding.publisherEntry.text.toString()
                val notes = binding.notesEntry.text.toString()

                // Add the series to the database.
                val series = MangaSeries(title,
                    numVolumes,
                    language,
                    author,
                    publisher,
                    notes,
                    model.selected.value?.coverImage?.extraLarge ?: "",
                    model.selected.value?.id ?: -1)

                if (seriesExistsInDatabase) {
                    mangaViewModel.updateSeries(series)
                } else {
                    mangaViewModel.insertSeries(series)
                }

                // Add the list of owned volumes to the database.
                for (volume in volumeList) {
                    volume.seriesTitle = title
                }
                mangaViewModel.insertOrUpdateVolume(volumeList)

                // If the manga series is already in the database, but the user decreased the number of volumes that are part of the series,
                // delete any extra volumes.
                if (volumeList.size < selectedSeriesVolumeList.size) {
                    selectedSeriesVolumeList.subList(volumeList.size, selectedSeriesVolumeList.size).forEach {
                        mangaViewModel.deleteVolume(it)
                    }
                }

                // Hide the soft keyboard.
                val inputMethodManager = context?.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager
                inputMethodManager.hideSoftInputFromWindow(view.windowToken, 0)

                // Navigate back to the collection screen.
                findNavController().navigate(R.id.next_action, null)
            } else {
                Toast.makeText(view.context, getString(R.string.title_required), Toast.LENGTH_SHORT).show()
            }
        }*/
    }
}